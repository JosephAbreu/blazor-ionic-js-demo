@page "/fetchdata"

@using BlazorIonicJSDemo.Data
@inject WeatherForecastService ForecastService

<ion-page>
<ion-header>
  <ion-toolbar color="primary">
    <ion-buttons slot="start">
      <ion-menu-button>
        <ion-icon name="menu"></ion-icon>
      </ion-menu-button>
    </ion-buttons>
    <ion-title>Weather Forecasts</ion-title>
  </ion-toolbar>
</ion-header>
<ion-content padding>

    <ion-text>
        This component demonstrates fetching data from a service.
    </ion-text>

    <ion-list>
        <ion-item lines="none">
            <ion-toggle slot="start" @bind-value:event="oninput" @bind-value="IsUsingCelcius" @onclick="ToggleCelcius"></ion-toggle>
            <ion-label>Use Celcius</ion-label>
        </ion-item>
    </ion-list>

    @if (forecasts == null)
    {
        <ion-text>
            <p><em>Loading...</em></p>
        </ion-text>
    }
    else
    {
        <ion-list>
            <ion-list-header>
                <ion-label>Daily Forecast</ion-label>
            </ion-list-header>
            @foreach (var forecast in forecasts)
            {
                <ion-card>
                    <ion-card-header>
                        <ion-card-subtitle>
                            @forecast.Date.ToShortDateString()
                        </ion-card-subtitle>
                        <ion-card-title>
                            @GetTempAsText(forecast)
                        </ion-card-title>
                    </ion-card-header>
                    <ion-card-content>
                        @forecast.Summary
                    </ion-card-content>
                </ion-card>
            }
        </ion-list>
        <br/><br/>
    }

</ion-content>
</ion-page>

@functions {
    public void ToggleCelcius()
    {
        IsUsingCelcius = !IsUsingCelcius;
    }

    public string GetTempAsText(WeatherForecast forecast)
    {
        return (IsUsingCelcius ? forecast.TemperatureC + " C" : forecast.TemperatureF + " F");
    }
}

@code {
    public bool IsUsingCelcius { get; set; } = false;
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
